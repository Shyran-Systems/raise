deploy-backend:
  stage: deploy-backend
  image: alpine:latest
  before_script:
    - |
      #!/bin/sh
      apk add --no-cache openssh-client bash
      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      echo "$GITLAB_PRIV_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      chmod 600 ~/.ssh/config
  script:
    - |
      #!/bin/sh
      ssh ubuntu@${BASTION}.${DOMAIN} \
      "cd /home/ubuntu/deployment && \
      ./deploy.sh ${CI_COMMIT_REF_SLUG} ${DOMAIN}"
  only:
    - merge_requests
  except:
    refs:
      - master
    variables:
      - $BUTTERCMS

build-front-review:
  stage: build
  variables:
    REACT_APP_COOKIE_DOMAIN: .${CI_COMMIT_REF_SLUG}.review.${DOMAIN}
    REACT_APP_HOST_URL: https://${CI_COMMIT_REF_SLUG}.review.${DOMAIN}
    REACT_APP_HOST_URL_AUTH: https://${CI_COMMIT_REF_SLUG}.api.${DOMAIN}
    REACT_APP_HOST_URL_CORE: https://${CI_COMMIT_REF_SLUG}.api.${DOMAIN}
    REACT_APP_HOST_URL_FILE: https://${CI_COMMIT_REF_SLUG}.api.${DOMAIN}
  script:
    - |
      #!/bin/sh
      if [ -n "${REVIEW_SLUG}" ]; then
        REACT_APP_COOKIE_DOMAIN=.${REVIEW_SLUG}.review.${DOMAIN}
        REACT_APP_HOST_URL=https://${REVIEW_SLUG}.review.${DOMAIN}
        REACT_APP_HOST_URL_AUTH=https://${REVIEW_SLUG}.api.${DOMAIN}
        REACT_APP_HOST_URL_CORE=https://${REVIEW_SLUG}.api.${DOMAIN}
        REACT_APP_HOST_URL_FILE=https://${REVIEW_SLUG}.api.${DOMAIN}
      fi
      echo $REACT_APP_HOST_URL
      yarn --pure-lockfile
      yarn run client:build:integration:bili
      mv  packages/client/build  packages/client/build_review
  only:
    changes:
      - 'packages/client/**/*'
  artifacts:
    when: always
    paths:
      - packages/client/build_review

build-front-integration:
  stage: build
  script:
    - 'echo $REACT_APP_HOST_URL'
    - 'yarn --pure-lockfile'
    - 'yarn run client:build:integration'
    - 'mv  packages/client/build  packages/client/build_int'
  only:
    changes:
      - 'packages/client/**/*'
  artifacts:
    when: always
    paths:
      - packages/client/build_int

build-front-production:
  stage: build
  script:
    - 'echo $REACT_APP_HOST_URL'
    - 'yarn --pure-lockfile'
    - 'yarn run client:build:production'
  only:
    changes:
      - 'packages/client/**/*'
  artifacts:
    when: always
    paths:
      - packages/client/build

deploy-canary:
  image: python:3.7-alpine
  stage: deploy
  before_script:
    - apk add --update bash
    - pip install awscli
  script:
    - |
      #!/bin/sh
      mv packages/client/build canary
      aws s3 sync canary s3://${BUCKET_NAME_CANARY}/
      ./cache_invalidation.sh ${BUCKET_NAME_CANARY}
      ./cache_invalidation.sh ${BUCKET_NAME_CANARY}
  only:
    - master
  needs:
    - build-front-production
  except:
    variables:
      - $BUTTERCMS

deploy-int:
  image: python:3.7-alpine
  stage: deploy
  before_script:
    - apk add --update bash
    - pip install awscli
  script:
    - |
      #!/bin/sh
      mv packages/client/build_int build_int
      aws s3 sync build_int s3://${BUCKET_NAME_INT}/ --metadata-directive REPLACE --cache-control max-age=86400000,public
      ./cache_invalidation.sh ${BUCKET_NAME_INT}
      ./cache_invalidation.sh ${BUCKET_NAME_INT}
  only:
    - master
  needs:
    - build-front-integration
  except:
    variables:
      - $BUTTERCMS

deploy-prod:
  image: python:3.7-alpine
  stage: deploy-prod
  before_script:
    - apk add --update bash
    - pip install awscli
  script:
    - |
      #!/bin/sh
      mv packages/client/build latest
      aws s3 sync latest s3://${BUCKET_NAME_PROD}/ --metadata-directive REPLACE --cache-control max-age=86400000,public
      ./cache_invalidation.sh ${BUCKET_NAME_PROD}
      ./cache_invalidation.sh ${BUCKET_NAME_CANARY}
  only:
    - master
  needs:
    - build-front-production
  except:
    variables:
      - $BUTTERCMS
  resource_group: production

review-front:
  image: python:3.7-alpine
  stage: review
  before_script:
    - apk add --update bash
    - pip install awscli
  script:
    - |
      #!/bin/sh
      if [ -n "${REVIEW_SLUG}" ]; then
        CI_COMMIT_REF_SLUG=${REVIEW_SLUG}
      fi
      echo ${CI_COMMIT_REF_SLUG}
      mv packages/client/build_review $(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z)
      aws s3 sync --delete $(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z) s3://${BUCKET_NAME_REVIEW_APP}/$(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z)
      rm -r -f $(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z)

  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: 'http://${CI_COMMIT_REF_SLUG}.review.$DOMAIN'
    on_stop: stop-review-front
  only:
    - merge_requests
    - latest
  needs:
    - build-front-review
  except:
    - master

stop-review-front:
  image: python:3.7-alpine
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$GITLAB_PRIV_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 600 ~/.ssh/config
    - pip install awscli
  script:
    - aws s3 rm s3://${BUCKET_NAME_REVIEW_APP}/$(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z) --recursive
    - aws s3 rm s3://${BUCKET_NAME_REVIEW_WWW}/$(echo ${CI_COMMIT_REF_SLUG} | tr A-Z a-z) --recursive
    - ssh ubuntu@${BASTION}.${DOMAIN} delete_review ${CI_COMMIT_REF_SLUG}
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  only:
    - merge_requests
  except:
    refs:
      - master
    variables:
      - $BUTTERCMS

cypress-e2e-review:
  image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cypress:latest
  stage: test
  variables:
    CYPRESS_url: 'http://${CI_COMMIT_REF_SLUG}.review.${DOMAIN}'
    CYPRESS_baseUrl: 'http://${CI_COMMIT_REF_SLUG}.review.${DOMAIN}'
    CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/packages/testing/.cache/Cypress
    CYPRESS_api: ${CI_COMMIT_REF_SLUG}.api.${DOMAIN}
    CYPRESS_isCanary: 'false'
  script:
    - yarn --pure-lockfile
    - cd packages/testing
    - yarn run cypress cache path
    - yarn run cypress cache list
    - yarn run cypress verify
    - yarn run ci:run
  artifacts:
    expire_in: '1 week'
    when: always
    paths:
      - packages/testing/ganache_db
      - packages/testing/cypress/screenshots
      - packages/testing/cypress/videos
      - packages/testing/cypress/snapshots
  only:
    - merge_requests
  needs:
    - review-front
  cache:
    key: ganache-global-cache
    paths:
      - packages/testing/ganache_db

cypress-e2e-canary:
  image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cypress:latest
  stage: test
  variables:
    CYPRESS_url: 'https://canary.raise.it'
    CYPRESS_baseUrl: 'https://canary.raise.it'
    CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/packages/testing/.cache/Cypress
    CYPRESS_api: api.raise.it
    CYPRESS_isCanary: 'false'
  script:
    - yarn --pure-lockfile
    - cd packages/testing
    - yarn run cypress cache path
    - yarn run cypress cache list
    - yarn run cypress verify
    - yarn run ci:run
  artifacts:
    expire_in: '1 week'
    when: always
    paths:
      - packages/testing/cypress/screenshots
      - packages/testing/ganache_db
      - packages/testing/cypress/videos
      - packages/testing/cypress/snapshots
  cache:
    key: ganache-global-cache
    paths:
      - packages/testing/ganache_db
  only:
    - master
  needs:
    - deploy-canary
  except:
    variables:
      - $BUTTERCMS
  resource_group: production

cypress-e2e-production:
  image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cypress:latest
  stage: test-prod
  variables:
    CYPRESS_url: 'https://app.raise.it'
    CYPRESS_baseUrl: 'https://app.raise.it'
    CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/packages/testing/.cache/Cypress
    CYPRESS_api: api.raise.it
  script:
    - yarn --pure-lockfile
    - cd packages/testing
    - yarn run cypress cache path
    - yarn run cypress cache list
    - yarn run cypress verify
    - yarn run ci:run
  artifacts:
    expire_in: '1 week'
    when: always
    paths:
      - packages/testing/cypress/screenshots
      - packages/testing/ganache_db
      - packages/testing/cypress/videos
      - packages/testing/cypress/snapshots
  cache:
    key: ganache-global-cache
    paths:
      - packages/testing/ganache_db
  only:
    - master
  needs:
    - deploy-prod
  except:
    variables:
      - $BUTTERCMS
  resource_group: production
